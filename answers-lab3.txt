Questions
Q1: What is the purpose of having an individual handler function for 
    each exception/interrupt? (i.e., if all exceptions/interrupts were 
    delivered to the same handler, what feature that exists in the 
    current implementation could not be provided?)
A1: The purpose of having an individual handler function for each 
    exception/interrupt is to distinguish them and let handle the
    interrupts in different ways. What's more, different handlers
    have different dpl, which means some interrupts can't be triggered
    by user program dirrectly.

Q2: Did you have to do anything to make the user/softint program
    behave correctly? The grade script expects it to produce a general 
    protection fault (trap 13), but softint's code says int $14. Why 
    should this produce interrupt vector 13? What happens if the kernel 
    actually allows softint's int $14 instruction to invoke the 
    kernel's page fault handler (which is interrupt vector 14)?
A2: Because in the SETGATE of page fault We set the dpl to 0, that means
    the user programs can't trigger it themselves. Once user programs try
    to trigger int $14, there will be a int $13(general protection fault)
    instead. 
    I set the dpl of SETGATE of int $14 to 3 and run the program again,
    and it did trigger a page fault interrupt.

Q3: The break point test case will either generate a break point 
    exception or a general protection fault depending on how you 
    initialized the break point entry in the IDT (i.e., your call 
    to SETGATE from trap_init). Why? How do you need to set it up 
    in order to get the breakpoint exception to work as specified 
    above and what incorrect setup would cause it to trigger a 
    general protection fault?
A3: As A2 said, the dpl of SETGATE determines if user programs can
    trigger that interrupt themselves. if dpl is set to 0, user programs
    are not allowed to trigger that interrupt, there will be a general
    protection fault instead. Only if the dpl is set to 3, then user
    programs can trigger it dirrectly.

Q4: What do you think is the point of these mechanisms, particularly in 
    light of what the user/softint test program does?
A4: I think these mechanisms are useful for the user programs to trigger
    some interrupts dirrectly when it's neccessary. They also make it 
    secure for the kernel when the user programs trigger some interrupts
    which they shouldn't have triggered.